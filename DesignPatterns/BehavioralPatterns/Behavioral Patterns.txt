# Chain-of-responsibility pattern

Верига от класове, които могат да изпълняват дадена работа(заявка). Всеки преценява дали въпросаната "работа" е за него. Или изпълнява задачата и връща резултата или предава задачата по веригата.
Структурата от класове е като подреден лист от работници.
Всеки клас (работник) има връзка само с тези до него.
Изпращача е информиран само за един получател. Изпращача не знае, кой от получателите (работниците) е получил съобщените.
Първият работник, който получи съобщението (извърши работата) прекратява веригата.
Подредбата в листа е много важна!

# State pattern

Този модел се използва за капсулиране на разлино поведение на един и същи обект въз основа на вътрешното си състояние.
Така се предоставя по-лесен начин за промяна на поведение в runtime без да се прибягва до големи условни (if) констрикции. 
Също така се подобрява и поддръжката на кода.

# Mediator pattern

Същността му е да дефинира един обект, който капсулира как набор от обекти взаимодействат.
По този начин се постига разхлабване на взаимодействеито между класовете.
Класовете могат да ползват медиатора, за да изпращат съобщения(заявки) към други клиенти на медиатора. 

# Strategy pattern

Предоставя възможността поведението на алгоритъма, да се избира по време на работа.
Моделът дефинира
 - семейство от алгоритми
 - капсулира всеки алгоритъм
 - прави алгоритмите взаимозаменяеми по време на работа